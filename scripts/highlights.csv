Highlight, Title
"Due to the tight coupling between computation and storage, databases need to reserve instances long term. However, their workloads can be bursty, which results in low resource utilization.", "Berkeley view of Serverless Computing"
"Cloud computing relieved users of physical infrastructure management but left them with a proliferation of virtual resources to manage. Multiplexing worked well for batch style workloads such as MapReduce or high performance computing, which could fully utilize the instances they allocated. It worked less well for stateful services, such as when porting enterprise software like a database management system to the cloud", "Berkeley view of Serverless Computing"
"the main reason for the success of low-level virtual machines was that in the early days of cloud computing users wanted to recreate the same computing environment in the cloud that they had on their local computers to simplify porting their workloads to the cloud", "Berkeley view of Serverless Computing"
"Although serverless computing is arguably an oxymoron—you are still using servers to compute—the name presumably stuck because it suggests that the cloud user simply writes the code and leaves all the server provisioning and administration tasks to the cloud provider.", "Berkeley view of Serverless Computing"
"Cloud functions are the general purpose element in serverless computing today, and lead the way to a simpliﬁed and general purpose programming model for the cloud.", "Berkeley view of Serverless Computing"
"serverless computing = FaaS + BaaS.", "Berkeley view of Serverless Computing"
"In any serverless platform, the user just writes a cloud function in a high-level language, picks the event that should trigger the running of the function—such as loading an image into cloud storage or adding an image thumbnail to a database table—and lets the serverless system handle everything else: instance selection, scaling, deployment, fault tolerance, monitoring, logging, security patches, and so on.", "Berkeley view of Serverless Computing"
"In the cloud context, serverful computing is like programming in low-level assembly language whereas serverless computing is like programming in a higher-level language such as Python.", "Berkeley view of Serverless Computing"
"Other features of high-level programming environments have natural parallels in serverless computing as well.", "Berkeley view of Serverless Computing"
"Automated memory management relieves programmers from managing memory resources, whereas serverless computing relieves programmers from managing server resources.", "Berkeley view of Serverless Computing"
"The storage and computation scale separately and are provisioned and priced independently. In general, the storage is provided by a separate cloud service and the computation is stateless.", "Berkeley view of Serverless Computing"
"Billing is by some dimension associated with the execution, such as execution time, rather than by a dimension of the base cloud platform, such as size and number of VMs allocated.", "Berkeley view of Serverless Computing"
"The serverless layer sits between applications and the base cloud platform, simplifying cloud programming.", "Berkeley view of Serverless Computing"
"Cloud functions (i.e., FaaS) provide general compute and are complemented by an ecosystem of specialized Backend as a Service (BaaS) oﬀerings such as object storage, databases, or messaging.", "Berkeley view of Serverless Computing"
"Today’s serverless computing with cloud functions diﬀers from its predecessors in several essential ways: better autoscaling, strong isolation, platform ﬂexibility, and service ecosystem support.", "Berkeley view of Serverless Computing"
"it charged the customer for the time their code was actually executing, not for the resources reserved to execute their program. This distinction ensured the cloud provider had “skin in the game” on autoscaling, and consequently provided incentives to ensure eﬃcient resource allocation.", "Berkeley view of Serverless Computing"
"One approach, reﬂected in AWS Lambda, is maintaining a “warm pool” of VM instances that need only be assigned to a tenant, and an “active pool” of instances that have been used to run a function before and are maintained to serve future invocations", "Berkeley view of Serverless Computing"
"The resource lifecycle management and multi-tenant bin packing necessary to achieve high utilization are key technical enablers of serverless computing.", "Berkeley view of Serverless Computing"
"By allowing users to bring their own libraries, serverless computing can support a much broader range of applications than PaaS services which are tied closely to particular use cases.", "Berkeley view of Serverless Computing"
"cloud functions (i.e., FaaS) popularized the serverless paradigm. However, it is worth acknowledging that they owe their success in part to BaaS oﬀerings that have existed since the beginning of public clouds, services like AWS S3. In our view, these services are domain-speciﬁc, highly optimized implementations of serverless computing. Cloud functions represent serverless computing in a more general form.", "Berkeley view of Serverless Computing"
"Unlike serverless computing, Kubernetes is a technology that simpliﬁes management of serverful computing.", "Berkeley view of Serverless Computing"
"Serverless computing, on the other hand, introduces a paradigm shift that allows fully oﬄoading operational responsibilities to the provider, and makes possible ﬁne-grained multi-tenant multiplexing.", "Berkeley view of Serverless Computing"
"One key diﬀerence between hosted Kubernetes services and serverless computing is the billing model. The former charges per reserved resources, whereas the latter per function execution duration.", "Berkeley view of Serverless Computing"
"the short run time, small memory footprint, and stateless nature improve statistical multiplexing by making it easier for cloud providers to ﬁnd unused resources on which to run these tasks.", "Berkeley view of Serverless Computing"
"If ARM or RISC-V oﬀer better cost-performance than x86, serverless computing makes it easier to change instruction sets.", "Berkeley view of Serverless Computing"
"Serverless users may save money since the functions are executed only when events occur, and ﬁne-grained accounting (today typically 100 milliseconds) means they pay only for what they use versus for what they reserve.", "Berkeley view of Serverless Computing"
"ExCamera parallelizes the “slow” parts of the encoding, and performs the “fast” parts serially. ExCamera exposes the internal state of the video encoder and decoder, allowing encoding and decoding tasks to be executed using purely functional semantics. In particular, each task takes the internal state along with video frames as input, and emits the modiﬁed internal state as output.", "Berkeley view of Serverless Computing"
"cloud functions, the general purpose serverless computing building block.", "Berkeley view of Serverless Computing"
"The stateless nature of serverless platforms makes it diﬃcult to support applications that have ﬁne-grained state sharing needs. This is mostly due to the limitations of existing storage services oﬀered by cloud providers.", "Berkeley view of Serverless Computing"
"Object storage services such as AWS S3, Azure Blob Storage, and Google Cloud Storage are highly scalable and provide inexpensive long-term object storage, but exhibit high access costs and high access latencies.", "Berkeley view of Serverless Computing"
"Sustaining 100K IOPS costs $30/min", "Berkeley view of Serverless Computing"
"Key-value databases, such as AWS DynamoDB, Google Cloud Datastore, or Azure Cosmos DB provide high IOPS, but are expensive and can take a long time to scale up.", "Berkeley view of Serverless Computing"
"while cloud providers oﬀer in-memory storage instances based on popular open source projects such as Memcached or Redis, they are not fault tolerant and do not autoscale as do serverless computing platforms.", "Berkeley view of Serverless Computing"
"To expand support to stateful applications, serverless frameworks need to provide a way for tasks to coordinate. For instance, if task A uses task B’s output there must be a way for A to know when its input is available, even if A and B reside on diﬀerent nodes. Many protocols aiming to ensure data consistency also require similar coordination.", "Berkeley view of Serverless Computing"
"Broadcast, aggregation, and shuﬄe are some of the most common communication primitives in distributed systems. These operations are commonly employed by applications such as machine learning training and big data analytics.", "Berkeley view of Serverless Computing"
"Note the signiﬁcantly lower number of remote messages for the VM-based solutions. This is because VM instances oﬀer ample opportunities to share, aggregate, or combine data locally across tasks before sending it or after receiving it.", "Berkeley view of Serverless Computing"
"Since the application cannot control the location of the cloud functions, a serverless computing application may need to send two and four orders of magnitude more data than an equivalent VM-based solution.", "Berkeley view of Serverless Computing"
"There are three factors impacting this cold start latency: (1) the time it takes to start a cloud function; (2) the time it takes to initialize the software environment of the function, e.g., load Python libraries; and (3) application-speciﬁc initialization in user code.", "Berkeley view of Serverless Computing"
"Another obstacle to predictable performance is the variability in the hardware resources that results from giving the cloud provider ﬂexibility to choose the underlying server.", "Berkeley view of Serverless Computing"
"serverless computing, identifying research challenges in ﬁve areas: abstractions, systems, networking, security, and architecture.", "Berkeley view of Serverless Computing"
"One approach would be to enable developers to specify these resource requirements explicitly. However, this would make it harder for cloud providers to achieve high utilization through statistical multiplexing, as it puts more constraints on function scheduling.", "Berkeley view of Serverless Computing"
"Today’s cloud function platforms have no knowledge of the data dependencies between the cloud functions, let alone the amount of data these functions might exchange. This ignorance can lead to suboptimal placement that could result in ineﬃcient communication patterns", "Berkeley view of Serverless Computing"
"With serverful computing, if an application needs less memory than the aggregated memory of the allocated VM instances, that memory goes to waste. In contrast, with a shared in-memory service, any memory not used by one serverless application can be allocated to another.", "Berkeley view of Serverless Computing"
"To implement high-performance Serverless Durable Storage, one approach would be to leverage an SSD-based distributed store paired with a distributed in-memory cache.", "Berkeley view of Serverless Computing"
"Sharing state between functions often uses a producer-consumer design pattern, which requires consumers to know as soon as the data is available from producers. Similarly, one function might want to signal another when a condition becomes available, or multiple functions might want to coordinate, e.g., to implement data consistency mechanisms.", "Berkeley view of Serverless Computing"
"Such signaling systems would beneﬁt from microsecond-level latency, reliable delivery, and broadcast or group communication.", "Berkeley view of Serverless Computing"
"Let applications provide a computation graph, enabling the cloud provider to co-locate the cloud functions to minimize communication overhead the adversarial tenant needs to conﬁrm the cohabitation with the victim on the same physical host, instead of randomly attacking strangers.", "Berkeley view of Serverless Computing"
"The ephemerality of cloud functions may limit the ability of the attacker to identify concurrently-running victims.", "Berkeley view of Serverless Computing"
"For programs that use SIMD instructions, running on a recent Intel Skylake microprocessor with 512-bit wide SIMD instructions can be much faster than running on the older Intel Broadwell microprocessor with 128-bit wide SIMD instructions.", "Berkeley view of Serverless Computing"
"The beauty of serverless computing is all the system administration capability that is included in the price, including redundancy for availability, monitoring, logging, and scaling. Cloud providers report that customers see cost savings of 4x-10x when moving applications to serverless as organizations use serverless more and more, they will be able to predict their serverless computing costs based on history, similar to the way they do today for other utility services, such as electricity.", "Berkeley view of Serverless Computing"
"Not only do function invocation semantics and packaging diﬀer between cloud serverless computing providers, but many serverless applications also rely upon an ecosystem of proprietary BaaS oﬀerings that lacks standardization. Object storage, key-value databases, authentication, logging, and monitoring are prominent examples.", "Berkeley view of Serverless Computing"
"if the start-up latency of a cloud function is not good enough for a given application, one could use a similar strategy: pre-warm cloud functions by exercising them regularly to ensure that there are enough running at any given time to satisfy the incoming requests.", "Berkeley view of Serverless Computing"
"Users lose many of the beneﬁts of serverless computing when they build applications that combine highly-elastic cloud functions with databases, search indexes, or serverful application tiers that have only limited elasticity.", "Berkeley view of Serverless Computing"
